//Default styles
@import "components/color-variables";
html {
 box-sizing: border-box;
 overflow-x: hidden;
}
*, *:before, *:after {
 box-sizing: inherit;
}


button,
input,
optgroup,
select,
textarea {
  font-family: "Pretendard Variable", Pretendard, -apple-system, BlinkMacSystemFont, system-ui, Roboto, "Helvetica Neue", "Segoe UI", "Apple SD Gothic Neo", "Noto Sans KR", "Malgun Gothic", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", sans-serif;
}

ul {
  &:not(.browser-default) {
    padding-left: 0;
    list-style-type: none;

    & > li {
      list-style-type: none;
    }
  }
}

a {
	text-decoration: none;

  // Gets rid of tap active state
  -webkit-tap-highlight-color: transparent;
}


// Positioning
.valign-wrapper {
  display: flex;
  align-items: center;
}


// classic clearfix
.clearfix {
  clear: both;
}


// Z-levels
.z-depth-0 {
  box-shadow: none !important;
}

/* 2dp elevation modified*/
.z-depth-1 {
  box-shadow: 0 2px 2px 0 rgba(0,0,0,0.14),
              0 3px 1px -2px rgba(0,0,0,0.12),
              0 1px 5px 0 rgba(0,0,0,0.2);
}
.z-depth-1-half {
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

/* 6dp elevation modified*/
.z-depth-2 {
  box-shadow: 0 4px 5px 0 rgba(0,0,0,0.14),
              0 1px 10px 0 rgba(0,0,0,0.12),
              0 2px 4px -1px rgba(0,0,0,0.3);
}

/* 12dp elevation modified*/
.z-depth-3 {
  box-shadow: 0 8px 17px 2px rgba(0,0,0,0.14),
              0 3px 14px 2px rgba(0,0,0,0.12),
              0 5px 5px -3px rgba(0, 0, 0, 0.2);
}

/* 16dp elevation */
.z-depth-4 {
  box-shadow: 0 16px 24px 2px rgba(0,0,0,0.14),
              0 6px 30px 5px rgba(0,0,0,0.12),
              0 8px 10px -7px rgba(0,0,0,0.2);
}

/* 24dp elevation */
.z-depth-5 {
  box-shadow: 0 24px 38px 3px rgba(0,0,0,0.14),
              0 9px 46px 8px rgba(0,0,0,0.12),
              0 11px 15px -7px rgba(0,0,0,0.2);
}

.hoverable {
  transition: box-shadow .25s;

  &:hover {
    box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  }
}

// Dividers

.divider {
  height: 1px;
  overflow: hidden;
  background-color: color("grey", "lighten-2");
}


//  Blockquote

blockquote {
  margin: 20px 0;
  padding-left: 1.5rem;
  border-left: 5px solid $light-primary-main;
}

// Icon Styles

i {
  line-height: inherit;

  &.left {
    float: left;
    margin-right: 15px;
  }
  &.right {
    float: right;
    margin-left: 15px;
  }
  &.tiny {
    font-size: 1rem;
  }
  &.small {
    font-size: 2rem;
  }
  &.medium {
    font-size: 4rem;
  }
  &.large {
    font-size: 6rem;
  }
}

// Images
img.responsive-img,
video.responsive-video {
  max-width: 100%;
  height: auto;
}


// Pagination

.pagination {

  li {
    display: inline-block;
    border-radius: 100%;
    text-align: center;
    vertical-align: top;
    height: 30px;

    a {
      border-radius: 100%;
      color: #444;
      display: inline-block;
      font-size: 1.2rem;
      padding: 0 10px;
      line-height: 30px;
    }

    &.active a { color: #fff; }

    &.active { background-color: $light-primary-light; }

    &.disabled a {
      cursor: default;
      color: #999;
    }

    i {
      font-size: 2rem;
    }
  }


  li.pages ul li {
    display: inline-block;
    float: none;
  }
}
@media screen and (max-width: 1024px) {
  .pagination {
    width: 100%;

    li.prev,
    li.next {
      width: 10%;
    }

    li.pages {
      width: 80%;
      overflow: hidden;
      white-space: nowrap;
    }
  }
}

// Breadcrumbs
.breadcrumb {
  font-size: 18px;
  color: rgba(255,255,255, .7);

  i,
  [class^="mdi-"], [class*="mdi-"],
  i.material-icons {
    float: left;
    font-size: 24px;
  }

  &:before {
    content: '\E5CC';
    color: rgba(255,255,255, .7);
    vertical-align: top;
    display: inline-block;
    font-family: 'Material Icons';
    font-weight: normal;
    font-style: normal;
    font-size: 25px;
    margin: 0 10px 0 8px;
    -webkit-font-smoothing: antialiased;
  }

  &:first-child:before {
    display: none;
  }

  &:last-child {
    color: #fff;
  }
}

// Parallax
.parallax-container {
  position: relative;
  overflow: hidden;
  height: 500px;

  .parallax {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;

    img {
      opacity: 0;
      position: absolute;
      left: 50%;
      bottom: 0;
      min-width: 100%;
      min-height: 100%;
      transform: translate3d(0,0,0);
      transform: translateX(-50%);
    }
  }
}

// Pushpin
.pin-top, .pin-bottom {
  position: relative;
}
.pinned {
  position: fixed !important;
}

/*********************
  Transition Classes
**********************/

ul.staggered-list li {
  opacity: 0;
}

.fade-in {
  opacity: 0;
  transform-origin: 0 50%;
}


/*********************
  Media Query Classes
**********************/

.hide-on-small-only, .hide-on-small-and-down {
  @media screen and (max-width: 720px) {
    display: none !important;
  }
}
.hide-on-med-and-down {
  @media screen and (max-width: 1024px) {
    display: none !important;
  }
}
.hide-on-med-and-up {
  @media screen and (min-width: 1025px) {
    display: none !important;
  }
}
.hide-on-med-only {
  @media only screen and (min-width: 720px) and (max-width: 1024px) {
    display: none !important;
  }
}
.hide-on-large-only {
  @media screen and (max-width: 1440px) {
    display: none !important;
  }
}
.hide-on-extra-large-only {
  @media screen and (max-width: 1920px) {
    display: none !important;
  }
}
.show-on-extra-large {
  @media screen and (max-width: 1920px) {
    display: block !important;
  }
}
.show-on-large {
  @media screen and (max-width: 1440px) {
    display: block !important;
  }
}
.show-on-medium {
  @media only screen and (min-width: 720px) and (max-width: 1024px) {
    display: block !important;
  }
}
.show-on-small {
  @media screen and (max-width: 720px) {
    display: block !important;
  }
}
.show-on-medium-and-up {
  @media screen and (min-width: 1025px) {
    display: block !important;
  }
}
.show-on-medium-and-down {
  @media screen and (max-width: 1024px) {
    display: block !important;
  }
}


// Center text on mobile
.center-on-small-only {
  @media screen and (max-width: 720px) {
    text-align: center;
  }
}

// Footer
$footer-font-color : $light-text-primary;
$footer-bg-color :#fff;
$footer-copyright-font-color : $light-text-primary;
.page-footer {
  padding-top: 20px;
  color: $footer-font-color;
  background-color: $footer-bg-color;

  .footer-copyright {
    overflow: hidden;
    min-height: 50px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px 0px;
    color: $footer-copyright-font-color;
  }
}

// Tables
.table-center{
  tr{
    td, th{
      text-align: center;

    }
  }
}

td{
  border: 1px solid $light-other-divider;
}
.table-category{
background: $light-primary-contrast;
text-align: center;
color: $light-primary-dark;
font-weight: 600;

}
$table-striped-color : $light-action-hover;
$table-border-color : $light-other-divider;
$element-top-margin: 0.25rem; 
$element-bottom-margin : 0.25rem;
table, th, td {
   border: none;
   
}

table {
  width:100%;
  display: table;
  border-collapse: collapse;
  border-spacing: 0;
  [type=checkbox] + span:not(.lever){
    vertical-align: middle;
  }
  &.striped {
    tr {
      border-bottom: none;
      vertical-align: middle;
    }

    > tbody {
      > tr:nth-child(odd) {
        background-color: $table-striped-color;
      }

      > tr > td {
        border-radius: 0;
      }
    }
  }

  &.highlight > tbody > tr {
    transition: background-color .25s ease;
    &:hover {
      background-color: $light-states-outline-selected-background;
    }
  }

  &.centered {
    thead tr th, tbody tr td {
      text-align: center;
    }
  }
  thead{
    th{
      background: #F6F7F9;
      border-top: 2.018px solid #AAA;
      color: $light-text-primary;
    }
  }
}

tr {
  border-bottom: 1px solid $table-border-color;
}

td, th{
  padding: .5rem 10px;
  height: 3rem;
  display: table-cell;
  text-align: left;
  vertical-align: middle;
  border-radius: 2px;
  font-size: 1rem;
  font-style: normal;
  font-weight: 400;
  letter-spacing: -0.04rem;
  *{
    font-size: 1rem;
    font-style: normal;
    font-weight: 400;
    letter-spacing: -0.04rem;
  }
  @media screen and (max-width: 1024px) {
    line-height: 1.5rem;
    padding: .5rem .6rem;
    word-break: keep-all;
    font-size: .9rem;
   }
   
}

// Responsive Table
@media screen and (max-width: 1024px) {

  table.responsive-table {
    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;
    display: block;
    position: relative;

    td:empty:before {
      content: '\00a0';
    }

    th,
    td {
      margin: 0;
      vertical-align: top;
    }

    th { text-align: left; }
    thead {
      display: block;
      float: left;

      tr {
        display: block;
        padding: 0 10px 0 0;

        th::before {
          content: "\00a0";
        }
      }
    }
    tbody {
      display: block;
      width: auto;
      position: relative;
      overflow-x: auto;
      white-space: nowrap;

      tr {
        display: inline-block;
        vertical-align: top;
      }
    }
    th {
      display: block;
      text-align: right;
    }
    td {
      display: block;
      min-height: 1.25em;
      text-align: left;
    }
    tr {
      border-bottom: none;
      padding: 0 10px;
    }

    /* sort out borders */
    thead {
      border: 0;
      border-right: 1px solid $table-border-color;
    }
  }

}


// Collections
$collection-hover-bg-color:$light-primary-main;
$collection-link-color :$light-primary-main;
$collection-active-color: $light-primary-main;
$collection-active-bg-color: $light-background-paper;
$collection-line-height : inherit;
$collection-bg-color : $light-background-paper;
$collection-border-color : $light-other-divider;
.collection {
  margin: $element-top-margin 0 $element-bottom-margin 0;
  border: 1px solid $collection-border-color;
  border-radius: 2px;
  overflow: hidden;
  position: relative;

  .collection-item {
    background-color: $collection-bg-color;
    line-height: $collection-line-height;
    padding: 10px 20px;
    margin: 0;
    border-bottom: 1px solid $collection-border-color;

    // Avatar Collection
    &.avatar {
      min-height: 84px;
      padding-left: 72px;
      position: relative;

      // Don't style circles inside preloader classes.
      &:not(.circle-clipper) > .circle,
      :not(.circle-clipper) > .circle {
        position: absolute;
        width: 42px;
        height: 42px;
        overflow: hidden;
        left: 15px;
        display: inline-block;
        vertical-align: middle;
      }
      i.circle {
        font-size: 18px;
        line-height: 42px;
        color: #fff;
        background-color: #999;
        text-align: center;
      }


      .title {
        font-size: 16px;
      }

      p {
        margin: 0;
      }

      .secondary-content {
        position: absolute;
        top: 16px;
        right: 16px;
      }

    }


    &:last-child {
      border-bottom: none;
    }

    &.active {
      background-color: $collection-active-bg-color;
      color: $collection-active-color;

      .secondary-content {
        color: #fff;
      }
    }
  }
  a.collection-item{
    display: block;
    transition: .25s;
    color: $collection-link-color;
    &:not(.active) {
      &:hover {
        background-color: $collection-hover-bg-color;
      }
    }
  }

  &.with-header {
    .collection-header {
      background-color: $collection-bg-color;
      border-bottom: 1px solid $collection-border-color;
      padding: 10px 20px;
    }
    .collection-item {
      padding-left: 30px;
    }
    .collection-item.avatar {
      padding-left: 72px;
    }
  }

}
// Made less specific to allow easier overriding
.secondary-content {
  float: right;
  color: $light-secondary-light
}
.collapsible .collection {
  margin: 0;
  border: none;
}



// Responsive Videos
.video-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;

    iframe, object, embed {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
}

// Progress Bar
$progress-bar-color:$light-secondary-light; 
.progress {
    position: relative;
    height: 4px;
    display: block;
    width: 100%;
    background-color: lighten($progress-bar-color, 40%);
    border-radius: 2px;
    margin: $element-top-margin 0 $element-bottom-margin 0;
    overflow: hidden;
  .determinate {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    background-color: $progress-bar-color;
    transition: width .3s linear;
  }
  .indeterminate {
    background-color: $progress-bar-color;
    &:before {
      content: '';
      position: absolute;
      background-color: inherit;
      top: 0;
      left:0;
      bottom: 0;
      will-change: left, right;
      // Custom bezier
      animation: indeterminate 2.1s cubic-bezier(0.650, 0.815, 0.735, 0.395) infinite;

    }
    &:after {
      content: '';
      position: absolute;
      background-color: inherit;
      top: 0;
      left:0;
      bottom: 0;
      will-change: left, right;
      // Custom bezier
      animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.840, 0.440, 1.000) infinite;
      animation-delay: 1.15s;
    }
  }
}
@keyframes indeterminate {
    0% {
      left: -35%;
      right:100%;
    }
    60% {
      left: 100%;
      right: -90%;
    }
    100% {
      left: 100%;
      right: -90%;
    }
}

@keyframes indeterminate-short {
    0% {
      left: -200%;
      right: 100%;
    }
    60% {
      left: 107%;
      right: -8%;
    }
    100% {
      left: 107%;
      right: -8%;
    }
}


/*******************
  Utility Classes
*******************/

.hide {
  display: none !important;
}

// Text Align
.left-align {
  text-align: left;
}
.right-align {
  text-align: right
}
.center, .center-align {
  text-align: center;
}

.left {
  float: left !important;
}
.right {
  float: right !important;
}

// No Text Select
.no-select {
  user-select: none;
}

.circle {
  border-radius: 50%;
}

.center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.truncate {
  display: block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.no-padding {
  padding: 0 !important;
}
//tags//
.tags{
  display: flex;
  span{
    color: $light-text-secondary;
  }
  i{
    color: $light-secondary-light;
  }
}

$color_1: #101010;
$color_2: #333;
$color_3: #0b3274;
$color_4: #888;
$color_5: #fff;
$background-color_1: #0b3274;
$background-color_2: #5d9ad3;
$background-color_3: #5894cd;
$background-color_4: #193d7a;
$background-color_5: #ddd;

//focus color
@mixin focus($offset: -.4rem, $color: $primary, $alpha: .8) {
	//border-radius: inherit;
	outline-offset: $offset;
	$transparent: 1 - $alpha;
	$focus-color: transparentize($color, $transparent);
	outline: 2px solid $focus-color;
}

//flex 확대 축소
@mixin flex-size($shrink, $grow) {
	flex-shrink: $shrink;
	flex-grow: $grow;
}

//btn reset
@mixin btn-reset {
	color: inherit;
	border: 0;
	background-color: inherit;
	&:hover,
	&:active {
		background-color: inherit;
	}
}

/* **** area mixin ****/
//columns
@mixin columns($total, $num, $gutter) {

}

//spacer
@mixin spacer($num) {
	@for $i from 1 through $num {
		$key: $i;
		$value: ($i * 4 * 0.1) + rem;
		//default spacers value: _variables.scss
		$spacers: map-merge(
			(
				$key: $value,
			),
			$spacers
		) !global;
	}
}

//border radius
@mixin radius($num) {
	$border-radius: map-merge(
		$num : ($num * 0.1) + rem,
	),
	$border-radius
}

//position
@mixin position(
	$p: absolute,
	$t: null,
	$b: null,
	$l: null,
	$r: null
) {
	position: $p;
	top: $t;
	bottom: $b;
	left: $l;
	right: $r;
}

//width height 같게
@mixin foursquare($size) {
	width: $size;
	height: $size;
}

//pseudo element setting
@mixin pseudo($c:null) {
	content: ""+$c+"";
}

//flex layout
@mixin flex-layout($d: flex, $ai: flex-start, $jc: flex-start, $fd: row) {
	display: $d;
	align-items: $ai;
	justify-content: $jc;
	flex-direction: $fd;
}

//group contents
@mixin group-wrap() {
	display: flex;
	flex-wrap: wrap;
	align-items: stretch;
	position: relative;
	width: 100%;
}
@mixin group() {
	flex: 1 1 auto;
	position: relative;
	width: 1%;
	min-width: 0;
}

//flex item equal width
@mixin equal-width() {
	flex: 1 1 0px;
	min-width: 0;
}

//position 중앙 정렬
@mixin position-center($type) {
	@each $type in $position-type {
		//좌우중앙
		@if ($type == 'x') {
			left: 50%;
			transform: translateX(-50%)
		}
			//상하중앙
		@else if ($type == 'y') {
			top: 50%;
			transform: translateY(-50%);
		}
			//상하좌우중앙
		@else if ($type == 'both') {
			left: 50%;
			top: 50%;
			transform: translateX(-50%) translateY(-50%);
		}
	}
}

//transform 기준점 중앙 정렬
@mixin transform-origin($x: 50%, $y: 50%) {
	transform-origin: $x $y;
}


/* **** text attr ****/
//text ellipsis
@mixin ellipsis($line) {
	display: -webkit-box;
	overflow: hidden;
	text-overflow: ellipsis;
	-webkit-box-orient: vertical;
	-webkit-line-clamp: $line;
}

//sr-only
@mixin sr-only {
	position: absolute !important;
	width: 1px !important;
	height: 1px !important;
	padding: 0 !important;
	margin: -1px !important;
	overflow: hidden !important;
	clip: rect(0, 0, 0, 0) !important;
	white-space: nowrap !important;
	border: 0 !important;
}

//reset text : popover/tooltip
@mixin reset-text {
	font-family: var(--#{$prefix}-fz-body-md);
	font-style: normal;
	font-weight: map-get($fws, normal);
	line-height: $line-height-base;
	text-align: left;
	text-decoration: none;
	text-shadow: none;
	text-transform: none;
	letter-spacing: normal;
	//word-break: normal;
	white-space: normal;
	word-spacing: normal;
	line-break: auto;
}

//css animation visibility
@mixin visibility($v) {
	@if ($v == hidden) {
		visibility: hidden;
		z-index: -1;
		opacity: 0;
	}
	@else if ($v == visible) {
		visibility: visible;
		z-index: auto;
		opacity: 1;
	}
}

/* **** scroll ****/
@mixin scrollbar {
	&::-webkit-scrollbar {
		width: .8rem;  
	}
	&::-webkit-scrollbar-thumb {
		background-color: var(--#{$prefix}gray-40);
		border-radius: .8rem; 
	}
	&::-webkit-scrollbar-track {
		background-color: var(--#{$prefix}gray-30);
	}
}

//font size
@mixin fz() {
	@each $type, $size in map-get($font-size, 'sizes') {
		@each $key, $value in $size {
			--#{$prefix}fz-#{$type}-#{$key}: #{$value};
		}
	}
}

//btn setting
@mixin btn() {
	@each $type, $size in map-get($btns, 'setting') {
		@each $key, $value in $size {
			--#{$prefix}btn-#{$type}-#{$key}: #{$value};

			@if ($type == 'h') { //높이별 class값 추가
				@at-root .btn.#{$key} {
					height: #{$value};
					padding: 0 var(--#{$prefix}btn-px-#{$key});
					border-radius: var(--#{$prefix}btn-rd-#{$key});
					font-size: var(--#{$prefix}btn-fz-#{$key});
				}
			}
		}
	}
}

//btn chips
@mixin btn-chip($name, $default) {
	@if ($name == 'outline') {
		@each $type, $size in map-get($btnChipOutline, 'setting') {
			@each $key, $value in $size {
				--#{$prefix}btnChipOutline-#{$type}-#{$key}: #{$value};

				@if ($type == 'h') {
					@at-root .btn-chip-outline.#{$key} {
						height: var(--#{$prefix}btnChipOutline-h-#{$key});
						padding: var(--#{$prefix}btnChipOutline-pd-#{$key});
						border-radius: var(--#{$prefix}btnChipOutline-rd-#{$key});
						font-size: var(--#{$prefix}btnChipOutline-fz-#{$key});
						.btn-del {
							width: var(--#{$prefix}btnChipOutline-size-#{$key});
							height: var(--#{$prefix}btnChipOutline-size-#{$key});
							background: url(#{$url}/component/common/ico_chip_del.svg) no-repeat 0 0;
							background-size:contain;
						}
					}
				}

				@if ($default) {
					@at-root .btn-chip-outline {
						height: var(--#{$prefix}btnChipOutline-h-#{$default});
						padding: var(--#{$prefix}btnChipOutline-pd-#{$default});
						border-radius: var(--#{$prefix}btnChipOutline-rd-#{$default});
						font-size: var(--#{$prefix}btnChipOutline-fz-#{$default});
						.btn-del {
							width: var(--#{$prefix}btnChipOutline-size-#{$default});
							height: var(--#{$prefix}btnChipOutline-size-#{$default});
							background: url(#{$url}/component/common/ico_chip_del.svg) no-repeat 0 0;
							background-size:contain;
							&:focus {
								@include focus($offset: .4rem);
							}
						}
					}
				}
			}
		}
	}
	@else if ($name == 'fill') {
		@each $type, $size in map-get($btnChipFill, 'setting') {
			@each $key, $value in $size {
				--#{$prefix}btnChipFill-#{$type}-#{$key}: #{$value};

				@if ($type == 'h') {
					@at-root .btn-chip-fill.#{$key} {
						height: var(--#{$prefix}btnChipFill-h-#{$key});
						padding: var(--#{$prefix}btnChipFill-pd-#{$key});
						border-radius: var(--#{$prefix}btnChipFill-rd-#{$key});
						font-size: var(--#{$prefix}btnChipFill-fz-#{$key});
					}
				}

				@if ($default) {
					@at-root .btn-chip-fill {
						height: var(--#{$prefix}btnChipFill-h-#{$default});
						padding: var(--#{$prefix}btnChipFill-pd-#{$default});
						border-radius: var(--#{$prefix}btnChipFill-rd-#{$default});
						font-size: var(--#{$prefix}btnChipFill-fz-#{$default});
						&:focus {
							@include focus($offset: .4rem);
						}
					}
				}
			}
		}
	}
}

/* **** form mixin ****/
//input setting
@mixin input() {
	@each $type, $size in map-get($inputs, 'setting') {
		@each $key, $value in $size {
			--#{$prefix}input-#{$type}-#{$key}: #{$value};

			@if ($type == 'h') { //높이별 class값 추가
				@at-root .form-control.#{$key} {
					height: #{$value};
					padding: 0 var(--#{$prefix}input-px-#{$key});
					border-radius: var(--#{$prefix}input-rd-#{$key});
					font-size: var(--#{$prefix}input-fz-#{$key});
				}
			}
		}
	}
}

@mixin radio() {
	@each $type, $size in map-get($radios, 'setting') {
		@each $key, $value in $size {
			--#{$prefix}rdo-#{$type}-#{$key}: #{$value};
			@if ($type == 'size') {
				@at-root .form-check.#{$key} {
					> [type=radio] {
						~ label {
							font-size: var(--krds-rdo-fz-#{$key});
							line-height: var(--krds-rdo-#{$type}-#{$key});
							min-height: var(--krds-rdo-#{$type}-#{$key});
							padding-left: calc(var(--krds-rdo-#{$type}-#{$key}) + var(--krds-spacer-2));
							&::before {
								width: var(--#{$prefix}rdo-#{$type}-#{$key});
								height: var(--#{$prefix}rdo-#{$type}-#{$key});
							}
							&::after {
								top: calc((var(--#{$prefix}rdo-size-#{$key}) - var(--#{$prefix}rdo-chk-#{$key})) / 2);
								left: calc((var(--#{$prefix}rdo-size-#{$key}) - var(--#{$prefix}rdo-chk-#{$key})) / 2);
								width: var(--#{$prefix}rdo-chk-#{$key});
								height: var(--#{$prefix}rdo-chk-#{$key});
							}
						}
					}
				}
			}
		}
	}
}
@mixin chk() {
	@each $type, $size in map-get($checkboxes, 'setting') {
		@each $key, $value in $size {
			--#{$prefix}chk-#{$type}-#{$key}: #{$value};
			@if ($type == 'size') {
				@at-root .form-check.#{$key} {
					> [type=checkbox] {
						~ label {
							font-size: var(--krds-chk-fz-#{$key});
							line-height: var(--krds-chk-#{$type}-#{$key});
							min-height: var(--krds-chk-#{$type}-#{$key});
							padding-left: calc(var(--krds-chk-#{$type}-#{$key}) + var(--krds-spacer-2));
							&::before {
								width: var(--#{$prefix}chk-#{$type}-#{$key});
								height: var(--#{$prefix}chk-#{$type}-#{$key});
							}
							&::after {
								width: var(--#{$prefix}chk-primary-chk-#{$key});
								height: var(--#{$prefix}chk-primary-chk-#{$key});
							}
						}
					}
					&.ico-only {
						> [type=checkbox] {
							~ label {
								padding-left: var(--krds-chk-#{$type}-#{$key});
							}
						}
					}
				}
			}
		}
	}
}

//select setting
@mixin select() {
	@each $type, $size in map-get($select, 'setting') {
		@each $key, $value in $size {
			--#{$prefix}select-#{$type}-#{$key}: #{$value};

			@if ($type == 'h') { //높이별 class값 추가
				@at-root .form-select.#{$key} {
					height: #{$value};
					padding: var(--#{$prefix}select-pd-#{$key});
					border-radius: var(--#{$prefix}select-rd-#{$key});
					font-size: var(--#{$prefix}select-fz-#{$key});
					background-size: var(--#{$prefix}select-bgs-#{$key});
				}
			}
		}
	}
}

//switch setting
@mixin switch() {
	@each $type, $size in map-get($switch, 'setting') {
		@each $key, $value in $size {
			--#{$prefix}switch-#{$type}-#{$key}: #{$value};

			@if ($type == 'w') {
				@at-root .form-switch.#{$key} {
					[type=checkbox] {
						~ i {
							&::before {
								width: var(--#{$prefix}switch-b-#{$key});
								height: var(--#{$prefix}switch-b-#{$key});
								border-radius: var(--#{$prefix}switch-rd-#{$key});
							}
							&::after {
								width: var(--#{$prefix}switch-w-#{$key});
								height: var(--#{$prefix}switch-h-#{$key});
							}
						}
						~ label {
							$labelValue : var(--#{$prefix}switch-w-#{$key});
							$pdValue : var(--#{$prefix}switch-pd-#{$key});
							padding-left: calc($labelValue + $pdValue);
							margin-left: calc($labelValue * -1);
							font-size: var(--#{$prefix}switch-fz-#{$key});
						}
						&:checked {
							~ i {
								&::before {
									$posL : calc(var(--#{$prefix}switch-w-#{$key}) - var(--#{$prefix}switch-b-#{$key}) - var(--#{$prefix}switch-br-#{$key}));
									@include position($l: $posL);
								}
							}
						}
					}
				}
			}
		}
	}
}

//form chips
@mixin form-chip($name, $default) {
	@if ($name == 'radio') {
		@each $type, $size in map-get($rdoChipOutline, 'setting') {
			@each $key, $value in $size {
				--#{$prefix}rdoChipOutline-#{$type}-#{$key}: #{$value};

				@if ($type == 'h') {
					@at-root .form-chip.#{$key} {
						.radio {
							~ .form-chip-outline {
								gap:var(--#{$prefix}chkChipOutline-gap-#{$key});
								height: var(--#{$prefix}rdoChipOutline-h-#{$key});
								padding: var(--#{$prefix}rdoChipOutline-pd-#{$key});
								border-radius: var(--#{$prefix}rdoChipOutline-rd-#{$key});
								font-size: var(--#{$prefix}rdoChipOutline-fz-#{$key});
								&::before {
									width:var(--#{$prefix}chkChipOutline-ico-#{$key});
									height:var(--#{$prefix}chkChipOutline-ico-#{$key});
									background: url(#{$url}/component/common/ico_check_chip.svg) no-repeat 0 0;
									background-size:contain;
								}
							}
							&:checked {
								~ .form-chip-outline {
									&::before {
										background-image: url(#{$url}/component/common/ico_check_chip_checked.svg);
									}
								}
							}
							&:disabled {
								~ .form-chip-outline {
									&::before {
										background-image: url(#{$url}/component/common/ico_check_chip_disabled.svg);
									}
								}
							}
						}
					}
				}

				@if ($default) {
					@at-root .form-chip {
						.radio {
							~ .form-chip-outline {
								gap:var(--#{$prefix}chkChipOutline-gap-#{$key});
								height: var(--#{$prefix}rdoChipOutline-h-#{$key});
								padding: var(--#{$prefix}rdoChipOutline-pd-#{$key});
								border-radius: var(--#{$prefix}rdoChipOutline-rd-#{$key});
								font-size: var(--#{$prefix}rdoChipOutline-fz-#{$key});
								&::before {
									width:var(--#{$prefix}chkChipOutline-ico-#{$key});
									height:var(--#{$prefix}chkChipOutline-ico-#{$key});
									background: url(#{$url}/component/common/ico_check_chip.svg) no-repeat 0 0;
									background-size:contain;
								}
							}
							&:checked {
								~ .form-chip-outline {
									&::before {
										background-image: url(#{$url}/component/common/ico_check_chip_checked.svg);
									}
								}
							}
							&:disabled {
								~ .form-chip-outline {
									&::before {
										background-image: url(#{$url}/component/common/ico_check_chip_disabled.svg);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	@else if ($name == 'checkbox') {
		@each $type, $size in map-get($chkChipOutline, 'setting') {
			@each $key, $value in $size {
				--#{$prefix}chkChipOutline-#{$type}-#{$key}: #{$value};

				@if ($type == 'h') {
					@at-root .form-chip.#{$key} {
						.checkbox {
							~ .form-chip-outline {
								gap:var(--#{$prefix}chkChipOutline-gap-#{$key});
								height: var(--#{$prefix}chkChipOutline-h-#{$key});
								padding: var(--#{$prefix}chkChipOutline-pd-#{$key});
								border-radius: var(--#{$prefix}chkChipOutline-rd-#{$key});
								font-size: var(--#{$prefix}chkChipOutline-fz-#{$key});
								&::before {
									width:var(--#{$prefix}chkChipOutline-ico-#{$key});
									height:var(--#{$prefix}chkChipOutline-ico-#{$key});
									background: url(#{$url}/component/common/ico_check_chip.svg) no-repeat 0 0;
									background-size:contain;
								}
							}
							&:checked {
								~ .form-chip-outline {
									&::before {
										background-image: url(#{$url}/component/common/ico_check_chip_checked.svg);
									}
								}
							}
							&:disabled {
								~ .form-chip-outline {
									&::before {
										background-image: url(#{$url}/component/common/ico_check_chip_disabled.svg);
									}
								}
							}
						}
					}
				}

				@if ($default) {
					@at-root .form-chip {
						.checkbox {
							~ .form-chip-outline {
								gap:var(--#{$prefix}chkChipOutline-gap-#{$key});
								height: var(--#{$prefix}chkChipOutline-h-#{$key});
								padding: var(--#{$prefix}chkChipOutline-pd-#{$key});
								border-radius: var(--#{$prefix}chkChipOutline-rd-#{$key});
								font-size: var(--#{$prefix}chkChipOutline-fz-#{$key});
								&::before {
									width:var(--#{$prefix}chkChipOutline-ico-#{$key});
									height:var(--#{$prefix}chkChipOutline-ico-#{$key});
									background: url(#{$url}/component/common/ico_check_chip.svg) no-repeat 0 0;
									background-size:contain;
								}
							}
							&:checked {
								~ .form-chip-outline {
									&::before {
										background-image: url(#{$url}/component/common/ico_check_chip_checked.svg);
									}
								}
							}
							&:disabled {
								~ .form-chip-outline {
									&::before {
										background-image: url(#{$url}/component/common/ico_check_chip_disabled.svg);
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

//tab setting
@mixin tabs() {
	@each $type, $size in map-get($tabs, 'setting') {
		@each $key, $value in $size {
			--#{$prefix}tab-#{$type}-#{$key}: #{$value};
		}
	}
}

